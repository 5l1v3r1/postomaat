#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright 2012 Oli Schacher
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# main startup file

import ConfigParser
from postomaat import POSTOMAAT_VERSION
from postomaat.daemon import DaemonStuff
import logging
import logging.config
import postomaat.funkyconsole
import sys
from postomaat.core import MainController
import signal
import os
import optparse
from postomaat.checkLogfileConfig import checkLogfileConfig

controller=None

theconfigfile='/etc/postomaat/postomaat.conf'
dconfdir='/etc/postomaat/conf.d'
theloggingfile='/etc/postomaat/logging.conf'
thepidfile = '/var/run/postomaat.pid'


def reloadconfig():
    """reload configuration file"""
    logger=logging.getLogger('postomaat')
    logger.info('Reloading configuration')
    newconfig=ConfigParser.ConfigParser()
    newconfig.readfp(open(theconfigfile))
    
    identifier="no identifier given"
    if newconfig.has_option('main', 'identifier'):
        identifier=newconfig.get('main','identifier')
    
    #load conf.d
    if os.path.isdir(dconfdir):
        filelist=os.listdir(dconfdir)
        configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
        logger.debug('Conffiles in %s: %s'%(dconfdir,configfiles))
        readfiles=newconfig.read(configfiles)
        logger.debug('Read additional files: %s'%(readfiles))

    logger.info('Reload config complete. Current configuration:%s'%identifier)
    controller.config=newconfig
    controller.propagate_core_defaults()
    
    logger.info('Reloading plugins...')
    ok=controller.load_plugins()
    if ok:
        logger.info('Plugin reload completed')
    else:
        logger.error('Plugin reload failed')
    
    controller.propagate_plugin_defaults()
    
    controller.reload()

def sighup(signum,frame):
    """handle sighup to reload config"""
    reloadconfig()


defaultattrs={
    #Postfix version 2.1 and later:
    'request':'smtpd_access_policy',
    'protocol_state':'RCPT',
    'protocol_name':'SMTP',
    'helo_name':'smtp.example.com',
    'queue_id':'8045F2AB23',
    'sender':'sender@example.com',
    'recipient':'recipient@example.org',
    'recipient_count':'1',
    'client_address':'1.2.3.4',
    'client_name':'host.example.net',
    'reverse_client_name':'host.example.net',
    'instance':'123.456.7',
    #Postfix version 2.2 and later:
    'sasl_method':'',
    'sasl_username':'',
    'sasl_sender':'',
    'size':'12345',
    'ccert_subject':'',
    'ccert_issuer':'',
    'ccert_fingerprint':'',
    #Postfix version 2.3 and later:
    'encryption_protocol':'TLSv1/SSLv3',
    'encryption_cipher':'DHE-RSA-AES256-SHA',
    'encryption_keysize':'256',
    'etrn_domain':'',
    #Postfix version 2.5 and later:
    'stress':'',
}

parser = optparse.OptionParser(version=POSTOMAAT_VERSION)
parser.add_option("--lint", action="store_true", dest="lint",
                  default=False, help="Check configuration and exit")
parser.add_option("--console", action="store_true", dest="console",
                  default=False, help="start an interactive console after postomaat startup")
parser.add_option("--attrs", action="store_true", dest="attrs",
                  default=False, help="print available message attributes and their defaults and exit")
parser.add_option("-f", "--foreground", action="store_true", dest="foreground", default=False,
                  help="start fuglu in the foreground, even if daemonize is enabled in the config")
parser.add_option("--pidfile", action="store", dest="pidfile",
                  help="use a different pidfile than /var/run/postomaat.pid")
parser.add_option("-c", "--config", action="store", dest="configfile",
                  help="use a different config file and disable reading from /etc/fuglu/conf.d")
parser.add_option("--debugmsg", action="store_true", dest="debugmsg",
                  default=False, help="simulate a message and print the result. use the debugmsg arguments listed below to override defaults")
parser.add_option("--debugmsgport", action="store", dest="debugmsgport",help="test a specific port configuration with debugmsg. if not specified, all plugins are run")
parser.add_option("--debug", action="store_true", dest="debug",
                  default=False, help="enable verbose/debug output for lint/debugmsg")
for k,v in defaultattrs.iteritems():
    parser.add_option("--%s"%k,action="store",dest=k,default=None,help="debugmsg argument, default=%s"%v)

(opts, args) = parser.parse_args()
if len(args) > 0:
    print "Unknown option(s): %s" % args
    print ""
    parser.print_help()
    sys.exit(1)


lint = opts.lint
console = opts.console
debugmsg = opts.debugmsg


if opts.pidfile:
    thepidfile = opts.pidfile

if opts.configfile:
    theconfigfile = opts.configfile
    theloggingfile = os.path.join(
        os.path.split(theconfigfile)[0], os.path.split(theloggingfile)[1])
    dconfdir = None

if opts.attrs:
    print "Supported attributes and their default:"
    print "See http://www.postfix.org/SMTPD_POLICY_README.html#protocol for a full description"
    print ""
    for k,v in defaultattrs.iteritems():
        print "%s : %s"%(k,v)
    sys.exit(0)


config=ConfigParser.ConfigParser()
if not os.path.exists(theconfigfile):
    print """Configfile (%s) not found. Please create it by renaming the .dist file and modifying it to your needs"""%theconfigfile
    sys.exit(1)
with open(theconfigfile) as fp:
    readconfig=config.readfp(fp)
#load conf.d
if dconfdir is not None and os.path.isdir(dconfdir):
    filelist=os.listdir(dconfdir)
    configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
    readfiles=config.read(configfiles)


daemon=DaemonStuff(thepidfile)
#we could have an empty config file
if  not (lint or debugmsg or console or opts.foreground):
    if config.has_option('main', 'daemonize'):
        if config.getboolean('main', 'daemonize'):
            daemon.createDaemon()
    else: #option not specified -> default to run daemon
        daemon.createDaemon()
        
if lint or debugmsg:
    level=logging.INFO
    if opts.debug:
        level=logging.DEBUG

    logging.basicConfig(level=level)
    
    fc=postomaat.funkyconsole.FunkyConsole()
    print fc.strcolor("postomaat", "yellow"),
    print fc.strcolor(POSTOMAAT_VERSION, "green")

    # check if directory used by logfile exists
    if not checkLogfileConfig(theloggingfile):
        sys.exit(1)
else:
    logging.config.fileConfig(theloggingfile)

controller=MainController(config)
controller.propagate_core_defaults()
baselogger=logging.getLogger('')
baselogger.info("postomaat version %s starting up"%POSTOMAAT_VERSION)

try:
    running_user=config.get('main','user')
    running_group=config.get('main','group')
except Exception:
    running_user='nobody'
    running_group='nobody'
daemon.drop_privs(running_user,running_group)


if lint:
    controller.lint()
elif debugmsg:    
    attrs=defaultattrs.copy()
    
    for arg in defaultattrs.keys():
        if getattr(opts,arg) is not None:
            attrs[arg]=getattr(opts,arg)
    print attrs
    action,arg=controller.test(attrs,port=opts.debugmsgport)
    if arg is None:
        arg=""
    print "Result: %s %s"%(action.upper(),arg)
else:
    signal.signal(signal.SIGHUP, sighup)
    if console:
        controller.debugconsole = True
    controller.startup()


